{"version":3,"file":"static/js/838.5bb2c93c.chunk.js","mappings":"mTAEMA,EAAM,mCACNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAS,mCAAG,oGACAH,EAAUI,IAAI,mBAAoB,CACvDC,OAAQ,CAAEC,QAASP,KAFE,cACjBQ,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAU,mCAAG,WAAMC,GAAN,uFACDV,EAAUI,IAAV,gBAAuBM,GAAM,CAClDL,OAAQ,CAAEC,QAASP,KAFG,cAClBQ,EADkB,yBAKjBA,GALiB,2CAAH,sDAQVI,EAAO,mCAAE,WAAMD,GAAN,uFACGV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFD,cACdQ,EADc,yBAKbA,GALa,2CAAF,sDAQPK,EAAU,mCAAG,WAAMF,GAAN,uFACDV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFG,cAClBQ,EADkB,yBAKjBA,GALiB,2CAAH,sDAQVM,EAAQ,mCAAG,WAAMC,GAAN,uFACCd,EAAUI,IAAI,eAAgB,CACnDC,OAAQ,CAAEC,QAASP,EAAKe,MAAAA,KAFJ,cAChBP,EADgB,yBAIfA,EAASC,MAJM,2CAAH,qD,8ICkBrB,UAlDqB,WACnB,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQX,GAAOY,EAAAA,EAAAA,IAAU,MAAjBZ,GAsBR,OApBAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,oGAEpBL,GAAa,GAFO,UAGGP,EAAAA,EAAAA,IAAWF,GAHd,UAGdH,EAHc,OAIpBU,EAAWV,EAASC,KAAKiB,SACzBN,GAAa,GACwB,IAAjCZ,EAASC,KAAKiB,QAAQC,OANN,yCAOXC,EAAAA,OAAAA,QAAe,qBAPJ,yDAUpBN,GAAS,GACTO,QAAQR,MAAR,MAXoB,yBAapBD,GAAa,GAbO,6EAAH,qDAgBrBK,GACD,GAAE,CAACd,KAGF,gCACGQ,IAAa,SAAC,IAAD,IACbE,IAAS,yBAAG,sBAAoBA,MACjC,8BACGJ,EAAQU,OAAS,GAChB,SAAC,KAAD,UACGV,EAAQa,KAAI,SAAAC,GACX,OACE,UAAC,KAAD,YACE,0BAAI,YAAQ,kBAAUA,EAAOC,WAC7B,uBAAID,EAAOE,YAFKF,EAAOpB,GAK5B,OAGH,uBAAG,4CAKZ,C,mMCnDYuB,EAAWC,EAAAA,EAAAA,IAAH,6GAKRC,EAAaD,EAAAA,EAAAA,IAAH,gDAGVE,EAAcF,EAAAA,EAAAA,IAAH,2DAIXG,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,gRAeVK,EAAcL,EAAAA,EAAAA,IAAH,yE","sources":["components/API.js","components/MovieReviews/MovieReviews.jsx","components/pages/MovieInfo/MovieStyles.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '183c3cacc9c38c09c14d38798ccfe9d7';\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const getMovies = async () => {\n  const response = await moviesApi.get('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieId = async id => {\n  const response = await moviesApi.get(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getCast= async id => {\n  const response = await moviesApi.get(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getReviews = async id => {\n  const response = await moviesApi.get(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getQuery = async query => {\n  const response = await moviesApi.get('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n};\n\n//https://api.themoviedb.org/3/search/movie?query=batman","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getReviews } from 'components/API';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport { ReviewList, ReviewBlock } from 'components/pages/MovieInfo/MovieStyles.styled';\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { id } = useParams(null);\n\n  useEffect(() => {\n    const getCurrentMovie = async () => {\n      try {\n        setIsLoading(true);\n        const response = await getReviews(id);\n        setReviews(response.data.results);\n        setIsLoading(false);\n        if (response.data.results.length === 0) {\n          return Notify.failure('No reviews found');\n        }\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCurrentMovie();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>An Error Occurred! {error}</p>}\n      <>\n        {reviews.length > 0 ? (\n          <ReviewList>\n            {reviews.map(review => {\n              return (\n                <ReviewBlock key={review.id}>\n                  <h3>Author: <br></br>{review.author}</h3>\n                  <p>{review.content}</p>\n                </ReviewBlock>\n              );\n            })}\n          </ReviewList>\n        ) : (\n          <p>There are no reviews for this movie</p>\n        )}\n      </>\n    </>\n  );\n};\n\nexport default MovieReviews;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoreInfo = styled.div`\n  border-top: black solid 1px;\n  border-bottom: black solid 1px;\n  padding: 10px;\n`;\nexport const ReviewList = styled.div`\nlist-style-type: none;\n`\nexport const ReviewBlock = styled.div`\nborder-bottom: 1px solid #000000;\n`\n\nexport const BackButton = styled(Link)`\n  display: block;\n  width: 60px;\n  text-align: center;\n  border: 1px black solid;\n  border-radius: 4px;\n  text-decoration: none;\n  margin-bottom: 5px;\n  color: #000000;\n  &:hover {\n    background-color: #000000;\n    color: #FFFFFF;\n  }\n`;\n\nexport const MovieDetail = styled.div`\n  display: flex;\n  gap: 16px;\n  padding: 10px;\n`;\n"],"names":["KEY","moviesApi","axios","baseURL","getMovies","get","params","api_key","response","data","getMovieId","id","getCast","getReviews","getQuery","query","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useParams","useEffect","getCurrentMovie","results","length","Notify","console","map","review","author","content","MoreInfo","styled","ReviewList","ReviewBlock","BackButton","Link","MovieDetail"],"sourceRoot":""}