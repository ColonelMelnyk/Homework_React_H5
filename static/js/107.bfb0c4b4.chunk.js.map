{"version":3,"file":"static/js/107.bfb0c4b4.chunk.js","mappings":"mTAEMA,EAAM,mCACNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAS,mCAAG,oGACAH,EAAUI,IAAI,mBAAoB,CACvDC,OAAQ,CAAEC,QAASP,KAFE,cACjBQ,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qDAOTC,EAAU,mCAAG,WAAMC,GAAN,uFACDV,EAAUI,IAAV,gBAAuBM,GAAM,CAClDL,OAAQ,CAAEC,QAASP,KAFG,cAClBQ,EADkB,yBAKjBA,GALiB,2CAAH,sDAQVI,EAAO,mCAAE,WAAMD,GAAN,uFACGV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFD,cACdQ,EADc,yBAKbA,GALa,2CAAF,sDAQPK,EAAU,mCAAG,WAAMF,GAAN,uFACDV,EAAUI,IAAV,gBAAuBM,EAAvB,YAAqC,CAC1DL,OAAQ,CAAEC,QAASP,KAFG,cAClBQ,EADkB,yBAKjBA,GALiB,2CAAH,sDAQVM,EAAQ,mCAAG,WAAMC,GAAN,uFACCd,EAAUI,IAAI,eAAgB,CACnDC,OAAQ,CAAEC,QAASP,EAAKe,MAAAA,KAFJ,cAChBP,EADgB,yBAIfA,EAASC,MAJM,2CAAH,qD,kGCpCRO,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,EAAMG,KAAI,SAAAC,GACT,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKV,IAAMY,MAAO,CAAEC,KAAMN,GAA/C,SACGG,EAAKI,OAASJ,EAAKK,MAAQL,EAAKM,kBAFhBN,EAAKV,GAM7B,KAGN,C,6ICuBD,UAlCa,WACX,OAA0BiB,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAqBA,OApBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IACE,IAAMI,EAAW,mCAAG,uGACK/B,EAAAA,EAAAA,MADL,UACZI,EADY,OAGI,KADhB4B,EAAS5B,EAAS6B,SACbC,OAHO,yCAITC,EAAAA,OAAAA,QAAe,+BAJN,OAMlBV,EAASO,GANS,2CAAH,qDAQjBD,GAMD,CALC,MAAOH,GACPC,GAAS,GACTO,QAAQR,MAAMA,EACf,CAbD,QAcED,GAAa,EACd,CACF,GAAE,KAGD,6BACE,SAAE,KAAF,UAAgB,mBACfd,EAAMqB,OAAS,IAAK,SAAC,IAAD,CAAWrB,MAAOA,IACtCa,IAAa,SAAC,IAAD,IACbE,IAAS,yBAAG,sBAAoBA,OAGtC,C,qICrCYS,EAAeC,EAAAA,EAAAA,IAAH,+CAGZC,EAAgBD,EAAAA,EAAAA,IAAH,4CAIbE,EAAiBF,EAAAA,EAAAA,IAAH,0C","sources":["components/API.js","components/TrendList/TrendList.jsx","components/pages/Home/Home.jsx","components/pages/Home/Home.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '183c3cacc9c38c09c14d38798ccfe9d7';\nconst moviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const getMovies = async () => {\n  const response = await moviesApi.get('trending/all/day', {\n    params: { api_key: KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieId = async id => {\n  const response = await moviesApi.get(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getCast= async id => {\n  const response = await moviesApi.get(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getReviews = async id => {\n  const response = await moviesApi.get(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n\n  return response;\n};\n\nexport const getQuery = async query => {\n  const response = await moviesApi.get('search/movie', {\n    params: { api_key: KEY, query },\n  });\n  return response.data;\n};\n\n//https://api.themoviedb.org/3/search/movie?query=batman","import { Link, useLocation } from 'react-router-dom';\nimport { TrendingList, TrendingMember } from 'components/pages/Home/Home.styled';\nexport const TrendList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <TrendingList>\n      {films.map(film => {\n        return (\n          <TrendingMember key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title || film.name || film.original_title}\n            </Link>\n          </TrendingMember>\n        );\n      })}\n    </TrendingList>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getMovies } from 'components/API';\nimport { TrendList } from 'components/TrendList/TrendList';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport { TrendingTitle } from './Home.styled';\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      const fetchMovies = async () => {\n        const response = await getMovies();\n        const movies = response.results;\n        if (movies.length === 0) {\n          return Notify.failure('Oops.. Simesing went wrong');\n        }\n        setFilms(movies);\n      };\n      fetchMovies();\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <main>\n      < TrendingTitle>Trending today</ TrendingTitle>\n      {films.length > 0 && <TrendList films={films} />}\n      {isLoading && <Loader />}\n      {error && <p>An Error Occurred! {error}</p>}\n    </main>\n  );\n};\n\nexport default Home;","import styled from '@emotion/styled';\nexport const TrendingList = styled.div`\nlist-style-type:none;\n`\nexport const TrendingTitle = styled.div`\n\nfont-size: 32px;\n`\nexport const TrendingMember = styled.div`\nmargin-top: 10px;\n`"],"names":["KEY","moviesApi","axios","baseURL","getMovies","get","params","api_key","response","data","getMovieId","id","getCast","getReviews","getQuery","query","TrendList","films","location","useLocation","map","film","to","state","from","title","name","original_title","useState","setFilms","isLoading","setIsLoading","error","setError","useEffect","fetchMovies","movies","results","length","Notify","console","TrendingList","styled","TrendingTitle","TrendingMember"],"sourceRoot":""}